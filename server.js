/**
 * This is JavaScript sample for "push-notification" trigger server sample.
 * Not necessary to be JavaScript server, choose your favorite language ;)
 */

const http  = require("http"),
      https = require("https"),
      fs    = require("fs");

// A library for handling VAPID and encrypting of Web-Push-Protocol.
// See https://github.com/web-push-libs/web-push for more information.
const webpush = require("web-push");

// "./application-server-keys.json" should be automatically generated by "postinstall"
const keys = require("./application-server-keys.json");

// Initialize library with **YOUR** project keys and settings.
webpush.setVapidDetails(
  process.env.SENDER_EMAIL || "mailto:otiai10@gmail.com",
  keys.publicKey,
  keys.privateKey
);

const subscribers = [
  // Here would be any subscribers endpoints,
  // therefore this is gonna be a list of, so called, "target list".
  // You should sotre this list to your database to make it persistent.
];

const controllers = {
  /**
   * ============================
   * == THIS IS NOT IMPORTANT! ==
   * ============================
   * `index` just renders `index.html`
   */
  index: (req, res) => {
    res.writeHead(200, {"Content-Type": "text/html"});
    const stream = fs.createReadStream("./index.html");
    stream.pipe(res);
  },

  /**
   * ============================
   * == THIS IS NOT IMPORTANT! ==
   * ============================
   * `js` just serves JavaScript files to browser
   */
  js: (req, res) => {
    res.writeHead(200, {"Content-Type": "text/javascript"});
    const stream = fs.createReadStream("." + req.url);
    stream.pipe(res);
  },

  /**
   * ============================
   * == THIS IS NOT IMPORTANT! ==
   * ============================
   * `img` just serves image files to browser
   */
  img: (req, res) => {
    res.writeHead(200, {"Content-Type": "image/png"});
    const stream = fs.createReadStream("." + req.url);
    stream.pipe(res);
  },

  /**
   * `register` accepts `subscription` model from browser JavaScript
   */
  register: (req, res) => {
    var body = [];
    req.on("data", chunk => body.push(chunk));
    req.on("end", () => {
      body = JSON.parse(Buffer.concat(body).toString());
      res.writeHead(200, {"Content-Type":"application/json"});
      res.end(JSON.stringify({msg:`I've got the endpoint: ${body.endpoint}`}));
      subscribers.push(body);
    });
  },

  /**
   * `trigger` would trigger push-notification to all subscribers registered
   */
  trigger: (req, res) => {
    const icon = `img/${Math.floor(Math.random() * 3)}.png`;
    const params = {
      title: "You've got a push-notification!!",
      msg:   `Hi, this is message from server. It"s ${new Date().toLocaleString()} now. You can send any message, e.g. notification icons and so`,
      icon:  icon,
    };
    Promise.all(subscribers.map(subscription => {
      return webpush.sendNotification(subscription, JSON.stringify(params), {});
    })).then(res => console.log(res)).catch(err => console.log('ERROR', err));
  },

};

const simpleserver = http.createServer((req, res) => {
  console.log("[request]", req.url);
  switch (req.url) {
  case "/":
    return controllers.index(req, res);
  case "/main.js":
  case "/service-worker.js":
    return controllers.js(req, res);
  case "/img/0.png":
  case "/img/1.png":
  case "/img/2.png":
    return controllers.img(req, res);
  case "/register":
    return controllers.register(req, res);
  case "/trigger":
    return controllers.trigger(req, res);
  }
  res.writeHead(404, {"Content-Type": "text/plain"});
  res.write(`Controller not found for requested URL: ${req.url}`);
  res.end();
});

const port = process.env.PORT || 8080;
simpleserver.listen(port);
console.log(`Server listening ${port}`);
